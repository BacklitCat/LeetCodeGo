package algo

/*
338. 比特位计数
给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。

示例 1：
输入：n = 2
输出：[0,1,1]
解释：
0 --> 0
1 --> 1
2 --> 10

示例 2：
输入：n = 5
输出：[0,1,1,2,1,2]
解释：
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
*/

// CountBitsParity 利用奇偶性
/*执行用时：4 ms, 在所有 Go 提交中击败了86.16%的用户
内存消耗：4.4 MB, 在所有 Go 提交中击败了99.20%的用户*/
func CountBitsParity(n int) []int {
	res := make([]int, n+1)
	res[0] = 0
	for i := 1; i < n+1; i++ {
		if i%2 == 0 {
			res[i] = res[i>>1]
		} else {
			res[i] = res[i-1] + 1
		}
	}
	return res
}
